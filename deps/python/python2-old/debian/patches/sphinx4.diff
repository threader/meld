Description: Support Sphinx 4
Origin: upstream, https://github.com/python/cpython/commit/6595cb0af4c51c0381c233b97884fe916a4ddd35
Author: Dong-hee Na <donghee.na92@gmail.com>
Bug-upstream: https://bugs.python.org/issue35293

Index: python2.7-2.7.18/Doc/tools/extensions/pyspecific.py
===================================================================
--- python2.7-2.7.18.orig/Doc/tools/extensions/pyspecific.py
+++ python2.7-2.7.18/Doc/tools/extensions/pyspecific.py
@@ -103,7 +103,11 @@ class ImplementationDetail(Directive):
 # Support for documenting decorators
 
 from sphinx import addnodes
-from sphinx.domains.python import PyModulelevel, PyClassmember
+try:
+    from sphinx.domains.python import PyFunction, PyMethod
+except ImportError:
+    from sphinx.domains.python import PyClassmember as PyMethod
+    from sphinx.domains.python import PyModulelevel as PyFunction
 
 class PyDecoratorMixin(object):
     def handle_signature(self, sig, signode):
@@ -114,16 +118,16 @@ class PyDecoratorMixin(object):
     def needs_arglist(self):
         return False
 
-class PyDecoratorFunction(PyDecoratorMixin, PyModulelevel):
+class PyDecoratorFunction(PyDecoratorMixin, PyFunction):
     def run(self):
         # a decorator function is a function after all
         self.name = 'py:function'
-        return PyModulelevel.run(self)
+        return PyFunction.run(self)
 
-class PyDecoratorMethod(PyDecoratorMixin, PyClassmember):
+class PyDecoratorMethod(PyDecoratorMixin, PyMethod):
     def run(self):
         self.name = 'py:method'
-        return PyClassmember.run(self)
+        return PyMethod.run(self)
 
 
 # Support for building "topic help" for pydoc
